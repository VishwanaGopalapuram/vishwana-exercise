{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/unt-iialab/INFO5731_Spring2020/blob/master/Assignments/INFO5731_Assignment_One.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ryk8D1Q4Wsrp"
      },
      "source": [
        "# **INFO5731 Assignment One**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This assignment includes range of programming tasks and data analysis exercises, aiming to enhance your Python skills and proficiency in string manipulation, numerical computations, and data science. Follow the instructions carefully and design well-structured Python programs to address each question.\n",
        "\n",
        "Late Submission will have a penalty of 10% reduction for each day after the deadline."
      ],
      "metadata": {
        "id": "qcP6re2g5A5r"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JkzR8cFAyGik"
      },
      "source": [
        "# Question 1 (10 points).\n",
        "\n",
        "The formula that describes the volume V of a hemisphere with radius r is the following:\n",
        "\n",
        "$ V=\\frac{2}{3}\\ast\\ \\pi\\ast\\ r^3 $\n",
        "\n",
        "Write a program to calculate the value of V when r is in the range of even numbers from 1-20. Output the result in the following format:\n",
        "\n",
        "\tr\tV\n",
        "\t2\t…\n",
        "\t4\t…\n",
        "\t6\t…\n",
        "\t.\n",
        "\t.\n",
        "\t.\n",
        "\t20\t…\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jDyTKYs-yGit",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0d8a832-fdae-4d25-c90d-b057680b6a76"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the radius (even number from 1 to 20): 18\n",
            "Radius    Volume\n",
            "18        12214.51\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "def calculate_hemisphere_volume(radius):\n",
        "    volume = (2/3) * math.pi * (radius ** 3)\n",
        "    return volume\n",
        "\n",
        "try:\n",
        "\n",
        "    user_input_radius = int(input(\"Enter the radius (even number from 1 to 20): \"))\n",
        "\n",
        "\n",
        "    if user_input_radius % 2 == 0 and 1 <= user_input_radius <= 20:\n",
        "\n",
        "        print(\"Radius    Volume\")\n",
        "\n",
        "\n",
        "        hemisphere_volume = calculate_hemisphere_volume(user_input_radius)\n",
        "        print(f\"{user_input_radius}        {hemisphere_volume:.2f}\")\n",
        "    else:\n",
        "        print(\"Please enter a valid even number between 1 and 20.\")\n",
        "except ValueError:\n",
        "    print(\"Invalid input. Please enter a valid integer.\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "90_NR8c5XGWc"
      },
      "source": [
        "# Question 2 (20 points)\n",
        "\n",
        "(a) Write a Python program to generate a sequence of 12 random numbers falling within the range of 50 to 150.\n",
        "\n",
        "(b) Arrange the generated numbers in ascending order. Display the sorted list.\n",
        "\n",
        "(c) Extend the program to arrange the numbers in descending order as well. Present the sorted list accordingly.\n",
        "\n",
        "(d) Compute and output the average of the entire group of generated numbers.\n",
        "\n",
        "(e) Enhance the program to calculate and display the average of the first 6 numbers from both the ascending and descending sorted lists."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5QX6bJjGWXY9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21efaadd-3501-4b25-cb4d-57f714293d35"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the lower limit for random numbers: 6\n",
            "Enter the upper limit for random numbers: 21\n",
            "Ascending Sorted List: [7, 7, 7, 9, 10, 13, 14, 14, 17, 17, 18, 19]\n",
            "Descending Sorted List: [19, 18, 17, 17, 14, 14, 13, 10, 9, 7, 7, 7]\n",
            "Average of all numbers: 12.666666666666666\n",
            "Average of the first 6 numbers (ascending): 8.833333333333334\n",
            "Average of the first 6 numbers (descending): 16.5\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "\n",
        "\n",
        "lower_limit = int(input(\"Enter the lower limit for random numbers: \"))\n",
        "upper_limit = int(input(\"Enter the upper limit for random numbers: \"))\n",
        "\n",
        "\n",
        "random_numbers = [random.randint(lower_limit, upper_limit) for _ in range(12)]\n",
        "\n",
        "\n",
        "ascending_sorted_numbers = sorted(random_numbers)\n",
        "print(\"Ascending Sorted List:\", ascending_sorted_numbers)\n",
        "\n",
        "\n",
        "descending_sorted_numbers = sorted(random_numbers, reverse=True)\n",
        "print(\"Descending Sorted List:\", descending_sorted_numbers)\n",
        "\n",
        "\n",
        "average_all_numbers = sum(random_numbers) / len(random_numbers)\n",
        "print(\"Average of all numbers:\", average_all_numbers)\n",
        "\n",
        "\n",
        "average_first_six_ascending = sum(ascending_sorted_numbers[:6]) / 6\n",
        "average_first_six_descending = sum(descending_sorted_numbers[:6]) / 6\n",
        "\n",
        "print(\"Average of the first 6 numbers (ascending):\", average_first_six_ascending)\n",
        "print(\"Average of the first 6 numbers (descending):\", average_first_six_descending)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1F_PZdH9Sh49"
      },
      "source": [
        "# Question 3 (20 points).\n",
        "\n",
        "Create a Python program that encompasses various string manipulation task:\n",
        "\n",
        "(a) Prompt the user to input two sentences.\n",
        "\n",
        "(b) Transform each sentence into a list, where each element corresponds to a word in the sentence. For example, if the sentences are \"Hello, how are you doing today?\" and \"This is an example sentence for the program!\"\n",
        "\n",
        "The program should output:\n",
        "['Hello', ',', 'how', 'are', 'you', 'doing', 'today', '?', 'This', 'is', 'an', 'example', 'sentence', 'for', 'the', 'program', '!']\n",
        "\n",
        "(c) Compare the two sentences. Print out a list of words that occur in both sentences.\n",
        "\n",
        "(d) Remove any punctuation from the sentence and print the sanitized sentences. It should remove at least the following characters, but it can remove more: period(“.”), comma (“,”), semicolon (“;”), and colon (“:”).\n",
        "\n",
        "(e) Count the number of vowels in each of the sentences. Print out each vowel and the occurrences  in the each of the two sentences separately, such as:\n",
        "\n",
        "Sentence1: a:2, e:2, i:0, etc.\n",
        "Sentence2: a:1, e:2, i:2, etc.\n",
        "\n",
        "Design a well-structured Python program to execute these tasks efficiently."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y0oOSlsOS0cq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "12ed68ac-b33d-4e44-cc4a-e4cd73723553"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the first sentence: who is that hero?\n",
            "Enter the second sentence: He is Tom Holland.\n",
            "Common Words: ['is']\n",
            "Sanitized Sentence 1: who is that hero\n",
            "Sanitized Sentence 2: He is Tom Holland\n",
            "Sentence 1: a:1, e:1, i:1, o:2, u:0, \n",
            "Sentence 2: a:1, e:1, i:1, o:2, u:0, \n"
          ]
        }
      ],
      "source": [
        "import string\n",
        "\n",
        "def get_input_sentences():\n",
        "    user_input1 = input(\"Enter the first sentence: \")\n",
        "    user_input2 = input(\"Enter the second sentence: \")\n",
        "    return user_input1, user_input2\n",
        "\n",
        "def transform_to_word_list(sentence):\n",
        "    words_list = sentence.split()\n",
        "    return [word.strip(string.punctuation) for word in words_list]\n",
        "\n",
        "def find_common_words(list_1, list_2):\n",
        "    return list(set(list_1) & set(list_2))\n",
        "\n",
        "def remove_sentence_punctuation(sentence):\n",
        "    return sentence.translate(str.maketrans(\"\", \"\", string.punctuation))\n",
        "\n",
        "def count_vowels_in_sentence(sentence):\n",
        "    vowels = \"aeiou\"\n",
        "    count_dict = {vowel: sentence.lower().count(vowel) for vowel in vowels}\n",
        "    return count_dict\n",
        "\n",
        "def display_vowel_counts(sentence_name, vowel_counts):\n",
        "    print(f\"{sentence_name}: \", end=\"\")\n",
        "    for vowel, count in vowel_counts.items():\n",
        "        print(f\"{vowel}:{count}\", end=\", \")\n",
        "    print()\n",
        "\n",
        "\n",
        "sentence_input1, sentence_input2 = get_input_sentences()\n",
        "\n",
        "\n",
        "word_list1 = transform_to_word_list(sentence_input1)\n",
        "word_list2 = transform_to_word_list(sentence_input2)\n",
        "\n",
        "\n",
        "common_words_list = find_common_words(word_list1, word_list2)\n",
        "print(\"Common Words:\", common_words_list)\n",
        "\n",
        "\n",
        "sanitized_sentence1 = remove_sentence_punctuation(sentence_input1)\n",
        "sanitized_sentence2 = remove_sentence_punctuation(sentence_input2)\n",
        "print(\"Sanitized Sentence 1:\", sanitized_sentence1)\n",
        "print(\"Sanitized Sentence 2:\", sanitized_sentence2)\n",
        "\n",
        "\n",
        "vowel_counts1 = count_vowels_in_sentence(sentence_input1)\n",
        "vowel_counts2 = count_vowels_in_sentence(sentence_input2)\n",
        "display_vowel_counts(\"Sentence 1\", vowel_counts1)\n",
        "display_vowel_counts(\"Sentence 2\", vowel_counts2)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Question 4 (20 Points)"
      ],
      "metadata": {
        "id": "OP4-5qxAtInv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Design and implement a simple command-line calculator program. The program should handle both integers and floating-point numbers.\n",
        "\n",
        "(a) Write program that takes a mathematical expression as input and evaluates it. The program should support addition, subtraction, multiplication, and division.\n",
        "\n",
        "(b) Extend the calculator to handle parentheses in mathematical expressions. Implement the necessary logic to evaluate expressions with nested parentheses.\n",
        "\n",
        "(c) Enhance your calculator to include additional mathematical operations such as exponentiation, square root, and modulus.\n",
        "\n",
        "(d) Implement error handling in the calculator program. Handle cases such as division by zero and invalid input expressions. Provide meaningful error messages.\n",
        "\n",
        "(e) Implement a command to exit the calculator."
      ],
      "metadata": {
        "id": "uzN4_hDptK9U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "def evaluate_expression(expression):\n",
        "    try:\n",
        "        result = eval(expression)\n",
        "        return result\n",
        "    except ZeroDivisionError:\n",
        "        return \"Error: Division by zero\"\n",
        "    except Exception as error:\n",
        "        return f\"Error: {error}\"\n",
        "\n",
        "def calculator_main():\n",
        "    print(\"Simple Command-Line Calculator\")\n",
        "\n",
        "    while True:\n",
        "        user_input_expression = input(\"Enter a mathematical expression (type 'exit' to quit): \")\n",
        "\n",
        "        # (e) Implement a command to exit the calculator.\n",
        "        if user_input_expression.lower() == 'exit':\n",
        "            print(\"Exiting calculator. Goodbye!\")\n",
        "            break\n",
        "\n",
        "        result = evaluate_expression(user_input_expression)\n",
        "\n",
        "        if isinstance(result, (int, float)):\n",
        "            print(\"Result:\", result)\n",
        "        else:\n",
        "            print(result)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    calculator_main()"
      ],
      "metadata": {
        "id": "8nQnVxjJuYtu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba687b9d-7d8d-41fc-d3f4-c8da551da879"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Simple Command-Line Calculator\n",
            "Enter a mathematical expression (type 'exit' to quit): (2*5)+10/2\n",
            "Result: 15.0\n",
            "Enter a mathematical expression (type 'exit' to quit): (5+10)/5*8+2\n",
            "Result: 26.0\n",
            "Enter a mathematical expression (type 'exit' to quit): exit\n",
            "Exiting calculator. Goodbye!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z3tBE7E-Xn5X"
      },
      "source": [
        "# Question 5 (30 points).\n",
        "\n",
        "In the field of Data Science, data is often formatted as a comma-delimited (CSV) file, where each line in a file corresponds to a field's value. Refer to Chapter 9 (p. 106) for more information on comma-delimited files.\n",
        "\n",
        "To answer this question, you will need to download the file [Assignment1_denton_housing.csv](https://raw.githubusercontent.com/unt-iialab/info5731-spring2022/main/assignments/Assignment1_denton_housing.csv) included with this assignment. The file contains statistics about housing in the city of Denton from 2008 to 2014. Write a program to implement the following questions.\n",
        "\n",
        "(a) (5 pts) Calculate the difference in the number of Occupied Housing Units from year to year and print it. The difference must be calculated for the consecutive years such as 2008-2009, 2009-2010 etc. Finally, print the values in the ascending order.\n",
        "\n",
        "(b) (5 pts) For all the years, calculate the percentage of housing units which are vacant an occupied. Print the results in the following format:\n",
        "\n",
        "Year Vacant Housing Units Occupied Housing Units\n",
        "\n",
        "    2008  30%   70%                          \n",
        "\t2009 ----- -----\n",
        "\t2010 ----- -----\n",
        "    2011 ----- -----\n",
        "\t2012 ----- -----\n",
        "    2013 ----- -----\n",
        "\t2014 ----- -----\n",
        "  \n",
        "  \n",
        "\n",
        "(c) (10 pts) Calculate and print the valued and years in which the highest number of housing units were vacant and occupied. Print the results in the following format:  \n",
        "\n",
        "                              Year\tValue\n",
        "\tVacant Housing Units\t  -----   -----\n",
        "\tOccupied Housing Units\t-----   -----\n",
        "\n",
        "(d) (10 pts) Calculate the harmonic mean of the total housing units and print it out. You can find the information about harmonic mean here: https://ncalculators.com/statistics/harmonic-mean-calculator.htm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lqGYuHBhcsRH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4214876-a097-48ee-84bd-4a8c78ea692e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(a) Difference in the number of Occupied Housing Units:\n",
            "\n",
            "\n",
            "(b) Percentage of Vacant and Occupied Housing Units:\n",
            "Year  Vacant Housing Units  Occupied Housing Units\n",
            "2014  5.73%   94.27%\n",
            "\n",
            "\n",
            "(c) Years and Values with the Highest Number of Vacant and Occupied Housing Units:\n",
            "Vacant Housing Units      2014   2814\n",
            "Occupied Housing Units    2014   46295\n",
            "\n",
            "\n",
            "(d) Harmonic Mean of Total Housing Units:\n",
            "Harmonic Mean of Total Housing Units: 49109.00\n"
          ]
        }
      ],
      "source": [
        "import csv\n",
        "from collections import defaultdict\n",
        "\n",
        "# Function to calculate the difference in the number of Occupied Housing Units\n",
        "def calculate_occupied_difference(data):\n",
        "    occupied_difference = defaultdict(int)\n",
        "\n",
        "    for i in range(1, len(data)):\n",
        "        year = data[i]['year']\n",
        "        prev_year = data[i - 1]['year']\n",
        "        occupied_difference[f'{prev_year}-{year}'] = int(data[i]['Occupied Housing Units']) - int(data[i - 1]['Occupied Housing Units'])\n",
        "\n",
        "    sorted_difference = sorted(occupied_difference.items())\n",
        "    for year_range, difference in sorted_difference:\n",
        "        print(f'{year_range}: {difference}')\n",
        "\n",
        "# Function to calculate the percentage of vacant and occupied housing units for each year\n",
        "def calculate_percentage(data):\n",
        "    print(\"Year  Vacant Housing Units  Occupied Housing Units\")\n",
        "    for entry in data:\n",
        "        year = entry['year']\n",
        "        total_units = int(entry['Total Housing Units'])\n",
        "        vacant_units = int(entry['Vacant Housing Units'])\n",
        "        occupied_units = int(entry['Occupied Housing Units'])\n",
        "\n",
        "        vacant_percentage = (vacant_units / total_units) * 100\n",
        "        occupied_percentage = (occupied_units / total_units) * 100\n",
        "\n",
        "        print(f'{year}  {vacant_percentage:.2f}%   {occupied_percentage:.2f}%')\n",
        "\n",
        "# Function to find the year and value with the highest number of vacant and occupied housing units\n",
        "def highest_housing_units(data):\n",
        "    max_vacant = max(data, key=lambda x: int(x['Vacant Housing Units']))\n",
        "    max_occupied = max(data, key=lambda x: int(x['Occupied Housing Units']))\n",
        "\n",
        "    print(f'Vacant Housing Units      {max_vacant[\"year\"]}   {max_vacant[\"Vacant Housing Units\"]}')\n",
        "    print(f'Occupied Housing Units    {max_occupied[\"year\"]}   {max_occupied[\"Occupied Housing Units\"]}')\n",
        "\n",
        "# Function to calculate the harmonic mean of total housing units\n",
        "def harmonic_mean(data):\n",
        "    total_units = [int(entry['Total Housing Units']) for entry in data]\n",
        "    harmonic_mean_value = len(total_units) / sum(1/x for x in total_units)\n",
        "    print(f'Harmonic Mean of Total Housing Units: {harmonic_mean_value:.2f}')\n",
        "\n",
        "# Provided dataset\n",
        "data = [\n",
        "    {'year': '2014', 'Total Housing Units': '49109', 'Vacant Housing Units': '2814', 'Occupied Housing Units': '46295'},\n",
        "    # ... (rest of the entries in the same format)\n",
        "]\n",
        "\n",
        "# (a) Calculate the difference in the number of Occupied Housing Units\n",
        "print(\"(a) Difference in the number of Occupied Housing Units:\")\n",
        "calculate_occupied_difference(data)\n",
        "print(\"\\n\")\n",
        "\n",
        "# (b) Calculate the percentage of vacant and occupied housing units for each year\n",
        "print(\"(b) Percentage of Vacant and Occupied Housing Units:\")\n",
        "calculate_percentage(data)\n",
        "print(\"\\n\")\n",
        "\n",
        "# (c) Calculate and print the years and values with the highest number of vacant and occupied housing units\n",
        "print(\"(c) Years and Values with the Highest Number of Vacant and Occupied Housing Units:\")\n",
        "highest_housing_units(data)\n",
        "print(\"\\n\")\n",
        "\n",
        "# (d) Calculate the harmonic mean of total housing units\n",
        "print(\"(d) Harmonic Mean of Total Housing Units:\")\n",
        "harmonic_mean(data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Mandatory Question\n",
        "\n",
        "Provide your thoughts on the assignment. What did you find challenging, and what aspects did you enjoy? Your opinion on the provided time to complete the assignment. Share any suggestions for improvement. Your feedback will be valuable for enhancing the learning experience."
      ],
      "metadata": {
        "id": "q8BFCvWp32cf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# The assignment is challenging to me.It covers various aspects of data analysis,including data loading, manipulation, and statistical calculations.Using real-world data (Denton housing figures) gives the tasks a more useful setting, which keeps students interested.Finding the harmonic mean requires using a complicated mathematical idea.The assignment allowed me  to apply Python programming skills to real-world data, providing a sense of practical application.\n",
        "#The variety of tasks kept the assignment interesting and ensures that I  encounter different challenges.the time given is enough for me.there is no needbfor improvement just a small request  can you please change the submission timing or comments  in the canvas it is very confuisng."
      ],
      "metadata": {
        "id": "_e557s2w4BpK"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}